# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id: $

DESCRIPTION="Manage the /usr/bin/python and python.1 man symlinks."
MAINTAINER="hawking@gentoo.org"
SVN_DATE='$Date: 2007-11-02 02:49:58 +0200 (Fri, 02 Nov 2007) $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

INTERPRETER_PATH="${ROOT}/usr/bin/"
MAN_PATH="${ROOT}/usr/share/man/man1/"

# find a list of python versions
find_targets() {
	local interpreter
	# Think twice before adding jython to this list. /usr/bin/jython
	# is a bash wrapper that calls java-config, which is a python
	# script, so you need a valid /usr/bin/python to start jython.
	for interpreter in "${INTERPRETER_PATH}"python?.? ; do
		echo ${interpreter#${INTERPRETER_PATH}}
	done
}

# try to remove python and python.1 symlinks
remove_symlinks() {
	rm -f "${INTERPRETER_PATH}"python &>/dev/null && \
	rm -f "${MAN_PATH}"python.1{,.gz,.bz2} &>/dev/null
}

# set a man page symlink
set_man_symlink() {
	local target="${1}" x extension

	for x in ".1" ".1.bz2" ".1.gz" ; do
		if [[ -e "${MAN_PATH}${target}${x}" ]] ; then
			extension="${x}"
			break
		fi
	done

	if [[ -z "${extension}" ]] ; then
		echo "Couldn't find a man page for ${target}; skipping." 1>&2
		return 1
	fi

	pushd "${MAN_PATH}" 1>/dev/null
	ln -nfs "${target}${extension}" "python${extension}"
	popd 1>/dev/null
}

# set python and python.1 symlinks
set_symlinks() {
	local target="${1}" targets=($(find_targets ))
	if is_number "${target}" && [[ ${target} -ge 1 ]] ; then
		target=${targets[$(( ${target} - 1 ))]}
	fi

	if ! has ${target} "${targets[@]}" ; then
		die -q "Invalid target ${target}"
	fi
	if [[ -f "${INTERPRETER_PATH}${target}" ]]; then
		remove_symlinks
		set_man_symlink "${target}"
	
		pushd "${INTERPRETER_PATH}" 1>/dev/null
		ln -nfs "${INTERPRETER_PATH}${target}" python
		popd 1>/dev/null
	else
		die -q "Target \"${1}\" doesn't appear to be valid!"
	fi
}

### show action

describe_show() {
	echo "Show the active python interpreter"
}

do_show() {
	active=$(canonicalise "${INTERPRETER_PATH}python")
	echo ${active#${INTERPRETER_PATH}}
}

### list action ###

describe_list() {
	echo "List installed python interpreters"
}

do_list() {
	local targets=( $(find_targets) )

	write_list_start "Available python interpreters:"

	if [[ -n ${targets[@]} ]] ; then
		# mark the active python
		local i active=$(do_show)
		for (( i = 0 ; i < ${#targets[@]} ; i = i + 1 )) ; do
			[[ ${targets[${i}]} == $active ]] && \
				targets[${i}]="${targets[${i}]} $(highlight '*' )"
		done
		write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set active python interpreter."
}

do_set() {
	if [[ -z "${1}" ]] ; then
		die -q "You didn't tell me which python interpreter to use"
	elif [[ -n "${2}" ]]; then
		die -q "Too many parameters"
	elif [[ -L "${INTERPRETER_PATH}python" ]] ; then
		if ! remove_symlinks; then
			die -q "Can't remove existing provider"
		elif ! set_symlinks "${1}" ; then
			die -q "Can't set new provider"
		fi
	elif [[ -e "${INTERPRETER_PATH}python" ]] ; then
		die -q "Sorry, ${INTERPRETER_PATH}python is not a symlink"
	else
		set_symlinks "${1}" || die -q "Can't set a new provider"
	fi
}

### update action ###

describe_update() {
	echo "Switch to the most recent CPython."
}

do_update() {
	local targets=( $(cd "${INTERPRETER_PATH}"; ls python?.?|sort -r) ) target
	target=${targets[0]}
	echo "Switching to ${target}"
	do_set ${target}
}

# vim: set ft=eselect :
