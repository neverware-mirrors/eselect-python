# Copyright 1999-2009 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id: $

DESCRIPTION="Manage the /usr/bin/python and python.1 man symlinks."
MAINTAINER="python@gentoo.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

ENV_D_PATH="${ROOT%/}/etc/env.d"
INTERPRETER_PATH="${ROOT%/}/usr/bin/"
MAN_PATH="${ROOT%/}/usr/share/man/man1/"

# Find a list of python versions
find_targets() {
	local interpreter
	# Think twice before adding jython to this list. /usr/bin/jython
	# is a bash wrapper that calls java-config, which is a python
	# script, so you need a valid /usr/bin/python to start jython.
	for interpreter in "${INTERPRETER_PATH}"python?.?; do
		if [[ -f "${interpreter}" ]]; then
			echo ${interpreter#${INTERPRETER_PATH}}
		fi
	done
}

set_python_script() {
	local script="${INTERPRETER_PATH}${1}" target="${2}"
	cat << EOF > "${script}"
#!/bin/sh
# Gentoo Python wrapper script

[[ "\${EPYTHON}" == "${script##*/}" ]] && EPYTHON="${target}"
"\${0%/*}/\${EPYTHON:-${target}}" "\$@"
EOF
	chmod +x "${script}"
}

# Try to remove python and python.1 symlinks
remove_symlinks() {
	local symlink symlink_target symlink_target_found
	rm -f "${INTERPRETER_PATH}"{idle,pydoc,python,python-config} &>/dev/null && \
	rm -f "${MAN_PATH}"python.1{,.gz,.bz2,.lzma} &>/dev/null
	for symlink in "${INTERPRETER_PATH}python"?; do
		[[ ! -L "${symlink}" ]] && continue
		symlink_target_found=0
		for symlink_target in "${symlink}".?; do
			[[ -f "${symlink_target}" ]] && symlink_target_found=1
		done
		if [[ "${symlink_target_found}" -eq 0 ]]; then
			rm -f "${symlink}"
		fi
	done
}

# Set a man page symlink
set_man_symlink() {
	local target="${1}" x extension

	for x in ".1" ".1.bz2" ".1.gz" ".1.lzma"; do
		if [[ -e "${MAN_PATH}${target}${x}" ]]; then
			extension="${x}"
			break
		fi
	done

	if [[ -z "${extension}" ]]; then
		echo "Couldn't find a man page for ${target}; skipping." 1>&2
		return 1
	fi

	pushd "${MAN_PATH}" 1>/dev/null
	ln -nfs "${target}${extension}" "python${extension}"
	popd 1>/dev/null
}

# Set python script and appropriate symlinks
set_scripts_and_symlinks() {
	local target="${1}" targets=($(find_targets ))
	if is_number "${target}" && [[ ${target} -ge 1 ]]; then
		target=${targets[$(( ${target} - 1 ))]}
	fi

	if ! has ${target} "${targets[@]}"; then
		die -q "Invalid target ${target}"
	fi
	if [[ -f "${INTERPRETER_PATH}${target}" ]]; then
		remove_symlinks
		set_man_symlink "${target}"
	
		pushd "${INTERPRETER_PATH}" 1>/dev/null
		set_python_script "python" "${target}"
		ln -nfs "${target}" "${target%.*}"
		ln -nfs "${target/python/python-config-}" python-config
		ln -nfs "${target/python/pydoc}" pydoc
		ln -nfs "${target/python/idle}" idle
		# 2to3 for >=2.6
		if [[ -f "${target/python/2to3-}" ]]; then
			ln -nfs "${target/python/2to3-}" 2to3
		fi

		popd 1>/dev/null
	else
		die -q "Target \"${1}\" doesn't appear to be valid!"
	fi
}

# Set the content of /etc/env.d/65python-docs
set_python_docs() {
	local path target="${1#python}" variable
	rm -f "${ENV_D_PATH}/65python-docs"
	if [[ -f "${ENV_D_PATH}/60python-docs-${target}" ]]; then
		variable="PYTHONDOCS_${target//./_}"
		path="$(. "${ENV_D_PATH}/60python-docs-${target}"; echo -n "${!variable}")"
		if [[ -d "${path}" ]]; then
			echo "PYTHONDOCS=\"${path}\"" > "${ENV_D_PATH}/65python-docs"
		fi
	fi
}

### show action

describe_show() {
	echo "Show the active python interpreter"
}

do_show() {
	active=$(canonicalise "${INTERPRETER_PATH}python")
	echo ${active#${INTERPRETER_PATH}}
}

### list action ###

describe_list() {
	echo "List installed python interpreters"
}

do_list() {
	local targets=( $(find_targets) )

	write_list_start "Available python interpreters:"

	if [[ -n ${targets[@]} ]]; then
		# mark the active python
		local i active=$(do_show)
		for ((i = 0; i < ${#targets[@]}; i = i + 1)); do
			[[ ${targets[${i}]} == $active ]] && \
				targets[${i}]="${targets[${i}]} $(highlight '*' )"
		done
		write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set active python interpreter."
}

do_set() {
	if [[ -z "${1}" ]]; then
		die -q "You didn't tell me which python interpreter to use"
	elif [[ -n "${2}" ]]; then
		die -q "Too many parameters"
	else
		if ! remove_symlinks; then
			die -q "Can't remove existing provider"
		elif ! set_scripts_and_symlinks "${1}"; then
			die -q "Can't set new provider"
		fi
		set_python_docs "${1}"
	fi
}

### update action ###

describe_update() {
	echo "Switch to the most recent CPython."
}

describe_update_options() {
	echo "--if-unset    : Do not override existing implementation"
	echo "--ignore SLOT : Ignore SLOT when setting symlinks"
}

do_update() {
	local if_unset=false ignored_slots=() slot=
	while [[ $# > 0 ]]; do
		case $1 in
			--if-unset)
				if_unset=true
				;;
			--ignore)
				ignored_slots=( ${ignored_slots[@]} "${2}" )
				shift;;
			--*)
				die -q "Unrecognized option '$1'"
				;;
		esac
		shift
	done

	if [[ -L "${ROOT%/}/usr/bin/python" ]]; then
		${if_unset} && return
	fi

	local targets=( $(cd "${INTERPRETER_PATH}"; ls python?.?|sort -r) ) target
	
	# Ignore slots
	for slot in ${ignored_slots[@]}; do
		targets=( ${targets[@]/python${slot}/} )
	done

	target=${targets[0]}
	echo "Switching to ${target}"
	do_set ${target}
}

# vim: set ft=eselect :
